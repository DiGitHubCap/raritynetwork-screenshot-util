#!/bin/bash
set -e

## -------------------------------------------------------------------------- ##
## -------------------------------- Variables ------------------------------- ##
## -------------------------------------------------------------------------- ##

# Default encoder.
Encoder="${SCREENSHOT_ENCODER:-jpeg}"

# Set the default frame rate at which to capture (Range: whatever your system
# can handle, default = 16 because most systems suck).
Anim_FPS="${SCREENSHOT_FPS:-16}"

# Flag variable used to start video capture.
Animation=0

# Flag variable used to trigger help output.
hflag=0

# Flag variable used to disable preview after upload.
nflag=0

# Flag variable used to toggle direct link.
dflag=0

# Flag variable used to toggle heavy compression for PNGs.
cflag=1

# Flag variable used to toggle optimal mode.
oflag=0

# Flag variable used to enable uploading through Tor
tflag=0

# Flag variable used to trigger uid input.
set_uid=0

# Quality to use for JPEG encoding
quality="${SCREENSHOT_QUALITY:-95}"

# Previewer to use when previewing screenshots
previewer="${SCREENSHOT_PREVIEWER:-xdg-open}"

# Directory to store screenshots in
dir="${SCREENSHOT_DIRECTORY:-$HOME/Pictures/Screenshots}"

## ---------------------------------- Flags --------------------------------- ##
# Setting variables with flags
while getopts "ahndcotup:q:f:e:" flag; do
    case "${flag}" in
        a) Animation=1 ;;
        h) hflag=1 ;;
        n) nflag=1 ;;
        d) dflag=1 ;;
        c) cflag=0 ;;
        o) oflag=1 ;;
        t) tflag=1 ;;
        u) uid="${OPTARG}" set_uid=1 ;;
        q) quality="${OPTARG}" ;;
        p) previewer="${OPTARG}" ;;
        f) Anim_FPS="${OPTARG}" ;;
        e) Encoder="${OPTARG}" ;;
    esac
done

## -------------------------- Pre-Function Setup  --------------------------- ##
# Ensure screenshot directory exists or can be created
if [[ ! -d "$dir" ]]; then
    mkdir -p "$dir"
    if [[ $? -ne 0 ]]; then exit 1; fi
fi
# Get UID from file and make the name
if [[ ! -f $HOME/.config/screenshot/sc.uid ]]; then
    echo "WARNING: UID is not set. Use -u to set UID."
    name="$dir/0."$(date +%s)
else name="$dir/"$(cat $HOME/.config/screenshot/sc.uid)"."$(date +%s); fi

# Select which PNG compression to use
if [[ $cflag -eq 1 ]]; then PNGfilter=0e; else PNGfilter=12; fi

## -------------------------------------------------------------------------- ##
## -------------------------------- Functions ------------------------------- ##
## -------------------------------------------------------------------------- ##

# Output help info
function helpme {
    echo -e "\n    Rarity Network Screenshot Util v3.0\n
Usage:             screenshot [OPTIONS]\n
Description:       This is a command-line tool that takes a screenshot using
                   either PNG/APNG or JPG and uploads it to Utils.Rarity.Network
Options:
  -h               Show this help message and exit
  -e png|jpeg      Sets the encoder to be used (Default: jpeg)
  -u <uid>         Sets the uid and exits
  -n               No previewing
  -d               Return direct link
  -c               Turns off PNG crushing
  -o               Turns on auto selecting the best encoder for smallest file
  -t               Upload screenshots through Tor (requires torsocks)
  -q 1-100         Quality parameter for JPEG encoding (Default: 95)
  -p <previewer>   Image previewer to use (Default: xdg-open)
  -a               Start and stop APNG capture
  -f <fps>         Set the fps to capture APNGs at (Default: 16)
Environment:
  SCREENSHOT_ENCODER png|jpeg
    Sets the encoder to be used (Default: jpeg)
  SCREENSHOT_FPS <fps>
    Set the fps to capture APNGs at (Default: 16)
  SCREENSHOT_QUALITY 1-100
    Quality parameter for JPEG encoding (Default: 95)
  SCREENSHOT_PREVIEWER <previewer>
    Image previewer to use (Default: xdg-open)
  SCREENSHOT_DIRECTORY <directory>
    Directory to store screenshots in (Default: $HOME/Pictures/Screenshots)
  SCREENSHOT_TORSOCKS_OPTS <options>
    Options to be passed to torsocks instead of the default
    \"-u screenshot -p screenshot\"
Examples:
  screenshot
    Take a normal screenshot.
  screenshot -n -e png
    Take a PNG screenshot, but don't preview it.
  screenshot -od
    Optimize the screenshot for the smallest file size and return a direct link
    to the image.
  screenshot -a -f 20
    Start recording an APNG at 20 fps. (Run \"screenshot -a\" again to stop.)
"
}

# Write the UID to file
function setuid {
    mkdir -p $HOME/.config/screenshot/
    echo $uid > $HOME/.config/screenshot/sc.uid
    echo "Successfully set UID to '$uid'"
}

# Set the extension variable and name
function setEXT {
    if [[ $1 -eq 1 ]]; then x=".png"
    elif [[ $1 -eq 2 ]]; then x=".jpg"
    elif [[ $1 -eq 3 ]]; then x=".apng"; fi
    ext=$x; name="$name$ext";
}

# Curl override for Tor support
function curl {
  if [[ $tflag -eq 1 ]]; then
      torsocks ${SCREENSHOT_TORSOCKS_OPTS:--u screenshot -p screenshot} curl "$@"
  else
      command curl "$@"
  fi
}

# Upload the final image to Rarity Network and preview it
function upload {
    # Upload it and save output from curl
    echo "Starting upload!"
    local url=$(curl -i -X POST -H "Content-Type: multipart/form-data" \
           -F "file=@$name" https://utils.rarity.network/upload.php | grep url=)
    # Get image URL from output and add it to clipboard
    url=$(echo -n ${url:4})
    # Check if user wants direct link and set it
    if [[ $dflag -eq 1 ]]; then
        url=$(echo $url | sed "s/\/img\//\/images\//g")$ext; fi
    echo -n $url | xsel -ib

    # Preview Check
    if [[ $nflag -eq 0 ]]; then $previewer "$name"; fi
}

# Capture the screenshot as a PNG
function tkss {
    maim -m 1 -s -b 2 -c 1,0.2,1,0.8 /tmp/screenshot.png
    if [[ ! -f /tmp/screenshot.png ]]; then exit 1; fi
}

# Compress the PNG screenshot with zopflipng
function PNGenc {
    setEXT 1
    zopflipng -q -y --filters=$PNGfilter --iterations=0 --lossy_8bit \
              --lossy_transparent /tmp/screenshot.png "$name"
    rm /tmp/screenshot.png
}

# Compress the PNG screenshot with mozjpeg
function JPGenc {
    setEXT 2
    /opt/mozjpeg/bin/cjpeg -quality $quality -dct float -quant-table 4 \
                           -outfile "$name" /tmp/screenshot.png
    rm /tmp/screenshot.png
}

# Try both encoders and use the smallest file produced
function OPTIencode {
    tfo=/tmp/out
    zopflipng -q -y --filters=$PNGfilter --iterations=0 --lossy_8bit \
              --lossy_transparent /tmp/screenshot.png "$tfo.png" & PIDpng=$!
    /opt/mozjpeg/bin/cjpeg -quality $quality -dct float -quant-table 4 \
                           -outfile "$tfo.jpg" /tmp/screenshot.png & PIDjpg=$!
    wait $PIDjpg
    wait $PIDpng
    sizePNG=$(stat --printf="%s" "$tfo.png")
    sizeJPG=$(stat --printf="%s" "$tfo.jpg")
    if [[ $sizePNG -lt $sizeJPG ]]; then setEXT 1; rm "$tfo.jpg"
    else setEXT 2; rm "$tfo.png"; fi
    mv $tfo$ext "$name";
    rm /tmp/screenshot.png
}

# Capture an animation with ffmpeg or stop it
function capanim {
    if [[ -f /tmp/ssffmpeg.pid ]]; then
        setEXT 3
        kill -s TERM $(cat /tmp/ssffmpeg.pid); rm /tmp/ssffmpeg.pid
        mv /tmp/screenshot.apng "$name"
        upload
    else
        read -r X Y W H < <(slop -c 1,0.2,1,0.8 -b 2 -f "%x %y %w %h"; echo "")
        ffmpeg -r $Anim_FPS -f x11grab -s "$W"x"$H" -i "$DISPLAY".0+$X,$Y \
               -pix_fmt rgb24 -plays 0 /tmp/screenshot.apng & \
            echo $! >> /tmp/ssffmpeg.pid
    fi
}

## -------------------------------------------------------------------------- ##
## ------------------------------- The Checks ------------------------------- ##
## -------------------------------------------------------------------------- ##

if [[ $hflag -eq 1 ]]; then
    helpme
elif [[ $set_uid -eq 1 ]]; then
    setuid
elif [[ $Animation -eq 1 ]]; then
    capanim
elif [[ $oflag -eq 1 ]]; then
    tkss
    OPTIencode
    upload
else
    if [[ $Encoder == "png" ]]; then
        tkss
        PNGenc
        upload
    elif [[ $Encoder == "jpeg" ]]; then
        tkss
        JPGenc
        upload
    else
        tkss
        JPGenc
        upload
    fi
fi
